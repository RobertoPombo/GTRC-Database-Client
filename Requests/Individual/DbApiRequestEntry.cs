using GTRC_Basics;
using GTRC_Database_Client.Responses;
using GTRC_Basics.Models;

namespace GTRC_Database_Client.Requests
{
    public class DbApiRequestEntry(DbApiConnectionConfig? connection = null) : DbApiRequest<Entry>(connection)
    {
        public async Task<DbApiListResponse<Entry>> GetAutoGeneratedRaceNumbers(int seasonId)
        {
            if (connection is not null) { Response = await connection.SendRequest(Model, HttpRequestType.Get, "/AutoGeneratedRaceNumbers/" + seasonId.ToString()); }
            return await ReturnAsList(Response);
        }

        public async Task<DbApiListResponse<Entry>> UpdateRaceNumbers(int seasonId)
        {
            if (connection is not null) { Response = await connection.SendRequest(Model, HttpRequestType.Update, "/RaceNumbers/" + seasonId.ToString()); }
            return await ReturnAsList(Response);
        }

        public async Task<DbApiListResponse<Entry>> UpdatePriorities(int seasonId)
        {
            if (connection is not null) { Response = await connection.SendRequest(Model, HttpRequestType.Update, "/Priorities/" + seasonId.ToString()); }
            return await ReturnAsList(Response);
        }

        public async Task<DbApiListResponse<Entry>> GetByUserSeason(int userId, int seasonId)
        {
            if (connection is not null) { Response = await connection.SendRequest(Model, HttpRequestType.Get, "/ByUserSeason/" + userId.ToString() + "/" + seasonId.ToString()); }
            return await ReturnAsList(Response);
        }

        public async Task<DbApiListResponse<Entry>> GetByUserEvent(int userId, int eventId)
        {
            if (connection is not null) { Response = await connection.SendRequest(Model, HttpRequestType.Get, "/ByUserEvent/" + userId.ToString() + "/" + eventId.ToString()); }
            return await ReturnAsList(Response);
        }

        public async Task<DbApiValueResponse<byte>> GetCarChangeCount(int entryId, int eventId)
        {
            if (connection is not null) { Response = await connection.SendRequest(Model, HttpRequestType.Get, "/CarChangeCount/" + entryId.ToString() + "/" + eventId.ToString()); }
            return new DbApiValueResponse<byte>(Response);
        }

        public async Task<DbApiValueResponse<DateTime>> GetDateLatestCarChange(int entryId, DateTime? date = null)
        {
            string _date = (date ?? DateTime.UtcNow).ToString("MM/dd/yyyy HH:mm:ss");
            if (connection is not null) { Response = await connection.SendRequest(Model, HttpRequestType.Get, "/DateLatestCarChange/" + entryId.ToString(), _date, nameof(date)); }
            return new DbApiValueResponse<DateTime>(Response);
        }

        public async Task<DbApiListResponse<Entry>> GetViolationsMinDriversPerEntryEvent(int seasonId)
        {
            if (connection is not null) { Response = await connection.SendRequest(Model, HttpRequestType.Get, "/Violations/MinDriversPerEntryEvent/" + seasonId.ToString()); }
            return await ReturnAsList(Response);
        }

        public async Task<DbApiListResponse<Entry>> GetViolationsMaxDriversPerEntryEvent(int seasonId)
        {
            if (connection is not null) { Response = await connection.SendRequest(Model, HttpRequestType.Get, "/Violations/MaxDriversPerEntryEvent/" + seasonId.ToString()); }
            return await ReturnAsList(Response);
        }

        public async Task<DbApiListResponse<Entry>> GetViolationsAllowDriverLineupPerEvent(int seasonId)
        {
            if (connection is not null) { Response = await connection.SendRequest(Model, HttpRequestType.Get, "/Violations/AllowDriverLineupPerEvent/" + seasonId.ToString()); }
            return await ReturnAsList(Response);
        }

        public async Task<DbApiListResponse<Entry>> GetViolationsDateStartRegistration(int seasonId)
        {
            if (connection is not null) { Response = await connection.SendRequest(Model, HttpRequestType.Get, "/Violations/DateStartRegistration/" + seasonId.ToString()); }
            return await ReturnAsList(Response);
        }

        public async Task<DbApiListResponse<Entry>> GetViolationsDateEndRegistration(int seasonId)
        {
            if (connection is not null) { Response = await connection.SendRequest(Model, HttpRequestType.Get, "/Violations/DateEndRegistration/" + seasonId.ToString()); }
            return await ReturnAsList(Response);
        }
    }
}
